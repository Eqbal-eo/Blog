#!/bin/bash

# Pre-commit hook to prevent sensitive data from being committed

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "${YELLOW}Running security check for sensitive information...${NC}"

# Get all files that are staged for commit
STAGED_FILES=$(git diff --cached --name-only)

# Define patterns to search for
PATTERNS=(
  'SUPABASE_URL=[^$]'
  'SUPABASE_ANON_KEY=[^$]'
  'JWT_SECRET=[^$]'
  'EMAIL_PASS=[^$]'
  'SESSION_SECRET=[^$]'
  'password'
  'api[-_]?key'
  'secret[-_]?key'
  'auth[-_]?token'
  'password[-_]?hash'
  'private[-_]?key'
)

# Initialize flag for found issues
ISSUES_FOUND=0

# Check each staged file
for FILE in $STAGED_FILES; do
  # Skip binary files and files that don't exist
  if [[ ! -f "$FILE" ]] || [[ "$(file -b --mime "$FILE" | grep -c '^text/')" -eq 0 ]]; then
    continue
  fi
  
  # Skip .env.example as it's supposed to have placeholders
  if [[ "$FILE" == ".env.example" ]]; then
    continue
  fi
  
  # Skip the pre-commit script itself
  if [[ "$FILE" == "pre-commit" ]] || [[ "$FILE" == ".git/hooks/pre-commit" ]]; then
    continue
  fi

  # Check each pattern
  for PATTERN in "${PATTERNS[@]}"; do
    if grep -q "$PATTERN" "$FILE"; then
      echo -e "${RED}WARNING: Potential sensitive data found in $FILE${NC}"
      echo -e "${YELLOW}Pattern: $PATTERN${NC}"
      grep --color=always -n "$PATTERN" "$FILE"
      ISSUES_FOUND=1
    fi
  done
done

# Block commit if issues were found
if [ $ISSUES_FOUND -eq 1 ]; then
  echo -e "${RED}ERROR: Potential sensitive data found in commit. Please remove it before committing.${NC}"
  echo -e "${YELLOW}Tip: Use .env files for sensitive data and ensure they are in .gitignore${NC}"
  exit 1
else
  echo -e "${GREEN}No sensitive data found. Proceeding with commit.${NC}"
  exit 0
fi
