<!DOCTYPE html>
<html lang="ar" dir="rtl">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>الإشعارات | مدونات آفاق</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.rtl.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/js/css/dashboard.css">
    <link rel="stylesheet" href="/js/css/notifications.css">
    <link rel="stylesheet" href="/js/css/footer.css">
</head>

<body>
    <%- include('./partials/header') %>

    <main>
        <div class="container my-4">
            <div class="notifications-box fadeIn">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3>
                        <strong>الإشعارات</strong>
                        <% if (unreadCount > 0) { %>
                            <span class="badge bg-danger"><%=unreadCount%></span>
                        <% } %>
                    </h3>
                    <% if (notifications.length > 0) { %>
                        <button id="markAllRead" class="btn btn-sm btn-outline-primary">
                            <i class="bi bi-check2-all"></i> تحديد الكل كمقروء
                        </button>
                    <% } %>
                </div>

                <% if (notifications.length > 0) { %>
                    <div class="notification-list">
                        <% notifications.forEach(function(notification) { %>
                            <div class="notification-item <%= !notification.is_read ? 'unread' : '' %>" data-id="<%= notification.id %>">
                                <div class="notification-content">
                                    <div class="notification-icon">
                                        <% if (notification.type === 'post_rejected') { %>
                                            <i class="bi bi-x-circle text-danger"></i>
                                        <% } else if (notification.type === 'post_approved') { %>
                                            <i class="bi bi-check-circle text-success"></i>
                                        <% } else { %>
                                            <i class="bi bi-bell"></i>
                                        <% } %>
                                    </div>
                                    <div class="notification-text">
                                        <p><%= notification.message %></p>
                                        <small class="text-muted">
                                            <i class="bi bi-clock"></i>
                                            <%= new Date(notification.created_at).toLocaleDateString('ar-SA', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %>
                                        </small>
                                    </div>
                                </div>

                                <div class="notification-actions">
                                    <% if (notification.post_id && notification.type === 'post_rejected') { %>
                                        <a href="/posts/edit/<%= notification.post_id %>" class="btn btn-sm btn-outline-primary">
                                            تعديل المنشور
                                        </a>
                                    <% } else if (notification.post_id && notification.type === 'post_approved') { %>
                                        <a href="/post/<%= notification.post_id %>" class="btn btn-sm btn-outline-success">
                                            عرض المنشور
                                        </a>
                                    <% } %>
                                    <% if (!notification.is_read) { %>
                                        <button class="btn btn-sm btn-light mark-read" data-id="<%= notification.id %>">
                                            <i class="bi bi-check"></i>
                                        </button>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>

                        <% if (hasMoreNotifications) { %>
                            <div class="text-center mt-4">
                                <button id="loadMore" class="btn btn-outline-secondary" data-page="<%= currentPage %>">
                                    عرض المزيد من الإشعارات
                                </button>
                            </div>
                        <% } %>
                    </div>
                <% } else { %>
                    <div class="empty-notifications text-center p-5">
                        <i class="bi bi-bell h1 text-muted"></i>
                        <p class="mt-3 text-muted">لا توجد إشعارات جديدة</p>
                    </div>
                <% } %>
            </div>
        </div>
    </main>

    <footer>
        <div class="container">
            مدونات آفاق | منصة للتدوين الثقافي والفكري © <%= new Date().getFullYear() %>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>        document.addEventListener('DOMContentLoaded', function () {
            // دالة لتحديث قائمة الإشعارات
            function updateNotificationsList(notifications) {
                const notificationList = document.querySelector('.notification-list');
                if (!notificationList) return;
                
                if (notifications.length === 0) {
                    // إذا لم تكن هناك إشعارات، عرض رسالة "لا توجد إشعارات"
                    notificationList.innerHTML = `
                        <div class="empty-notifications text-center p-5">
                            <i class="bi bi-bell h1 text-muted"></i>
                            <p class="mt-3 text-muted">لا توجد إشعارات جديدة</p>
                        </div>
                    `;
                } else {
                    // إذا كانت هناك إشعارات، نقوم بإنشاء عناصر للإشعارات الغير مقروءة فقط
                    const loadMoreBtn = document.getElementById('loadMore');
                    const loadMoreContainer = loadMoreBtn ? loadMoreBtn.parentNode : null;
                    
                    // حذف جميع الإشعارات الحالية مع الاحتفاظ بزر "تحميل المزيد" إذا وجد
                    let notificationElements = Array.from(notificationList.children).filter(el => 
                        !el.contains(loadMoreBtn) || el !== loadMoreContainer
                    );
                    notificationElements.forEach(el => el.remove());
                    
                    // إضافة الإشعارات الغير مقروءة فقط
                    notifications.forEach(notification => {
                        const notificationItem = createNotificationItem(notification);
                        if (loadMoreContainer) {
                            notificationList.insertBefore(notificationItem, loadMoreContainer);
                        } else {
                            notificationList.appendChild(notificationItem);
                        }
                    });
                }
            }
            
            // دالة لتحديث عداد الإشعارات
            function updateNotificationsCounter(count) {
                const badge = document.querySelector('.badge');
                
                if (count > 0) {
                    if (badge) {
                        badge.textContent = count;
                    } else {
                        const title = document.querySelector('h3 strong');
                        if (title) {
                            const newBadge = document.createElement('span');
                            newBadge.className = 'badge bg-danger';
                            newBadge.textContent = count;
                            title.insertAdjacentElement('afterend', newBadge);
                        }
                    }
                } else {
                    if (badge) {
                        badge.remove();
                    }
                }
                
                // تحديث عداد الإشعارات في رأس الصفحة (إذا وجد)
                const headerCounter = document.getElementById('notificationCounter');
                if (headerCounter) {
                    if (count > 0) {
                        headerCounter.textContent = count > 99 ? '99+' : count;
                        headerCounter.style.display = 'inline-block';
                    } else {
                        headerCounter.style.display = 'none';
                    }
                }
            }
            
            // تحديد إشعار واحد كمقروء
            document.querySelectorAll('.mark-read').forEach(button => {
                button.addEventListener('click', async function () {
                    const notificationId = this.getAttribute('data-id');
                    const notificationItem = document.querySelector(`.notification-item[data-id="${notificationId}"]`);                        try {
                            const response = await fetch(`/notifications/${notificationId}/read`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            
                            if (response.ok) {
                                const data = await response.json();
                                
                                // إخفاء الإشعار الحالي بتأثير بصري
                                notificationItem.style.opacity = '0';
                                
                                // إزالة الإشعار وتحديث الواجهة بعد انتهاء التأثير البصري
                                setTimeout(() => {
                                    // تحديث قائمة الإشعارات بالإشعارات غير المقروءة فقط
                                    updateNotificationsList(data.remainingNotifications);
                                    
                                    // تحديث عدد الإشعارات غير المقروءة
                                    updateNotificationsCounter(data.unreadCount);
                                }, 500);
                            }
                    } catch (error) {
                        console.error('حدث خطأ:', error);
                    }
                });
            });

            // تحديد جميع الإشعارات كمقروءة
            const markAllReadBtn = document.getElementById('markAllRead');
            if (markAllReadBtn) {
                markAllReadBtn.addEventListener('click', async function () {                    try {
                        const response = await fetch('/notifications/read/all', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        if (response.ok) {
                            const data = await response.json();
                            
                            // تطبيق تأثير الاختفاء على جميع الإشعارات
                            document.querySelectorAll('.notification-item').forEach(item => {
                                item.style.opacity = '0';
                            });
                            
                            // إزالة جميع الإشعارات وتحديث الواجهة بعد انتهاء التأثير البصري
                            setTimeout(() => {
                                // تحديث قائمة الإشعارات (ستكون فارغة)
                                updateNotificationsList([]);
                                
                                // تحديث عداد الإشعارات غير المقروءة (سيكون صفر)
                                updateNotificationsCounter(0);
                                
                                // إخفاء زر "تحديد الكل كمقروء"
                                markAllReadBtn.style.display = 'none';
                            }, 500);
                        }
                    } catch (error) {
                        console.error('حدث خطأ:', error);
                    }
                });
            }            // تحميل المزيد من الإشعارات
            const loadMoreBtn = document.getElementById('loadMore');
            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', async function () {
                    const nextPage = parseInt(this.getAttribute('data-page')) + 1;
                    
                    try {
                        // طلب الإشعارات غير المقروءة فقط
                        const response = await fetch(`/notifications?page=${nextPage}&showReadNotifications=false`);
                        if (response.ok) {
                            const data = await response.json();
                            
                            // إضافة الإشعارات الجديدة للقائمة (فقط الإشعارات غير المقروءة)
                            const notificationList = document.querySelector('.notification-list');
                            data.notifications.forEach(notification => {
                                const notificationItem = createNotificationItem(notification);
                                notificationList.insertBefore(notificationItem, loadMoreBtn.parentNode);
                            });
                            
                            // تحديث رقم الصفحة
                            this.setAttribute('data-page', nextPage);
                            
                            // إخفاء زر تحميل المزيد إذا لم يعد هناك المزيد
                            if (!data.hasMore) {
                                this.parentNode.remove();
                            }
                        }
                    } catch (error) {
                        console.error('حدث خطأ:', error);
                    }
                });
            }

            // دالة لإنشاء عنصر إشعار جديد في الواجهة
            function createNotificationItem(notification) {
                const template = document.createElement('div');
                template.className = `notification-item ${!notification.is_read ? 'unread' : ''}`;
                template.setAttribute('data-id', notification.id);
                
                let iconHtml = '<i class="bi bi-bell"></i>';
                if (notification.type === 'post_rejected') {
                    iconHtml = '<i class="bi bi-x-circle text-danger"></i>';
                } else if (notification.type === 'post_approved') {
                    iconHtml = '<i class="bi bi-check-circle text-success"></i>';
                }
                
                let actionsHtml = '';
                if (notification.post_id && notification.type === 'post_rejected') {
                    actionsHtml = `<a href="/posts/edit/${notification.post_id}" class="btn btn-sm btn-outline-primary">تعديل المنشور</a>`;
                } else if (notification.post_id && notification.type === 'post_approved') {
                    actionsHtml = `<a href="/post/${notification.post_id}" class="btn btn-sm btn-outline-success">عرض المنشور</a>`;
                }
                
                if (!notification.is_read) {
                    actionsHtml += `<button class="btn btn-sm btn-light mark-read" data-id="${notification.id}"><i class="bi bi-check"></i></button>`;
                }
                
                const formattedDate = new Date(notification.created_at).toLocaleDateString('ar-SA', {
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric', 
                    hour: '2-digit', 
                    minute: '2-digit'
                });
                
                template.innerHTML = `
                    <div class="notification-content">
                        <div class="notification-icon">
                            ${iconHtml}
                        </div>
                        <div class="notification-text">
                            <p>${notification.message}</p>
                            <small class="text-muted">
                                <i class="bi bi-clock"></i>
                                ${formattedDate}
                            </small>
                        </div>
                    </div>
                    <div class="notification-actions">
                        ${actionsHtml}
                    </div>
                `;
                
                // إضافة استمعاع حدث للزر تحديد كمقروء
                const markReadBtn = template.querySelector('.mark-read');
                if (markReadBtn) {                    markReadBtn.addEventListener('click', async function () {
                        const notificationId = this.getAttribute('data-id');
                        const notificationItem = document.querySelector(`.notification-item[data-id="${notificationId}"]`);
                          try {
                            const response = await fetch(`/notifications/${notificationId}/read`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            });
                            
                            if (response.ok) {
                                const data = await response.json();
                                
                                // إخفاء الإشعار الحالي بتأثير بصري
                                notificationItem.style.opacity = '0';
                                
                                // إزالة الإشعار وتحديث الواجهة بعد انتهاء التأثير البصري
                                setTimeout(() => {
                                    // تحديث قائمة الإشعارات بالإشعارات غير المقروءة فقط
                                    updateNotificationsList(data.remainingNotifications);
                                    
                                    // تحديث عدد الإشعارات غير المقروءة
                                    updateNotificationsCounter(data.unreadCount);
                                }, 500);
                            }
                        } catch (error) {
                            console.error('حدث خطأ:', error);
                        }
                    });
                }
                
                return template;
            }
        });
    </script>
</body>

</html>
